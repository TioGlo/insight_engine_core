from sentence_transformers import SentenceTransformer
from typing import List, Union
import numpy as np
from ..config import EMBEDDING_MODEL_NAME # Import from your config

# Load the model once when the module is imported for efficiency
# This can take a few seconds the first time it downloads the model.
# Ensure the machine has internet access or the model is pre-downloaded.
try:
    print(f"Embedder: Loading sentence transformer model: {EMBEDDING_MODEL_NAME}...")
    model = SentenceTransformer(EMBEDDING_MODEL_NAME)
    # Get embedding dimension dynamically from the loaded model
    EMBEDDING_DIMENSION = model.get_sentence_embedding_dimension()
    print(f"Embedder: Model loaded. Embedding dimension: {EMBEDDING_DIMENSION}")
except Exception as e:
    print(f"Embedder: Error loading sentence transformer model '{EMBEDDING_MODEL_NAME}': {e}")
    print("Embedder: Please ensure the model name is correct and dependencies are installed.")
    print("Embedder: You might need to run: uv pip install sentence-transformers transformers torch torchvision torchaudio")
    model = None
    EMBEDDING_DIMENSION = None # Or a default if you have one, but None is safer

class Embedder:
    def __init__(self, model_name: str = None):
        """
        Initializes the Embedder.
        If model_name is provided, it attempts to load that specific model.
        Otherwise, it uses the globally loaded model.
        """
        if model_name and model_name != EMBEDDING_MODEL_NAME:
            try:
                print(f"Embedder (instance): Loading specific model: {model_name}...")
                self.model = SentenceTransformer(model_name)
                self.dimension = self.model.get_sentence_embedding_dimension()
                print(f"Embedder (instance): Model {model_name} loaded. Dimension: {self.dimension}")
            except Exception as e:
                print(f"Embedder (instance): Error loading specific model '{model_name}': {e}")
                self.model = None # Fallback to global or handle error
                self.dimension = None
                # If global model also failed, this instance won't work.
                if not globals().get('model'):
                     raise RuntimeError(f"Failed to load both global and instance-specific embedding model: {model_name}")
                else: # Fallback to global model if instance-specific fails
                    print(f"Embedder (instance): Falling back to globally loaded model {EMBEDDING_MODEL_NAME}")
                    self.model = globals().get('model')
                    self.dimension = EMBEDDING_DIMENSION

        elif model: # Use the globally pre-loaded model
            self.model = model
            self.dimension = EMBEDDING_DIMENSION
        else:
            raise RuntimeError(f"Embedding model '{EMBEDDING_MODEL_NAME}' (or specified) could not be loaded. Embedder cannot function.")

    def embed(self, text: str) -> Union[np.ndarray, None]:
        """Generates an embedding for a single piece of text."""
        if not self.model:
            print("Embedder: Model not loaded, cannot generate embedding.")
            return None
        try:
            embedding = self.model.encode(text, convert_to_numpy=True)
            return embedding
        except Exception as e:
            print(f"Embedder: Error during text embedding: {e}")
            return None

    def embed_batch(self, texts: List[str]) -> Union[List[np.ndarray], None]:
        """Generates embeddings for a batch of texts."""
        if not self.model:
            print("Embedder: Model not loaded, cannot generate embeddings.")
            return None
        if not texts:
            return []
        try:
            embeddings = self.model.encode(texts, convert_to_numpy=True, show_progress_bar=False) # Set show_progress_bar=True for long batches
            return embeddings
        except Exception as e:
            print(f"Embedder: Error during batch text embedding: {e}")
            return None

    def get_dimension(self) -> Union[int, None]:
        """Returns the dimension of the embeddings generated by the model."""
        return self.dimension

if __name__ == '__main__':
    # Test the embedder
    # This will try to download the model if it's the first time.
    try:
        print("\n--- Testing Global Model Instance ---")
        embedder_global_test = Embedder() # Uses the model loaded at module import
        if embedder_global_test.model:
            example_text = "This is a test sentence for the RAG framework."
            embedding = embedder_global_test.embed(example_text)
            if embedding is not None:
                print(f"Text: '{example_text}'")
                print(f"Embedding (first 5 dims): {embedding[:5]}")
                print(f"Embedding shape: {embedding.shape}")
                print(f"Model dimension: {embedder_global_test.get_dimension()}")

            example_batch = ["First sentence.", "Second piece of text.", "Hello world!"]
            batch_embeddings = embedder_global_test.embed_batch(example_batch)
            if batch_embeddings is not None:
                print(f"\nBatch texts: {example_batch}")
                for i, emb in enumerate(batch_embeddings):
                    print(f"Embedding for text {i+1} (first 5 dims): {emb[:5]}, Shape: {emb.shape}")
        else:
            print("Global model not loaded, skipping tests.")

        # Test with a different model (if you want to try another one)
        # print("\n--- Testing Specific Model Instance (e.g., a different SBERT model) ---")
        # try:
        #     # Example: 'paraphrase-MiniLM-L3-v2' is another small model
        #     embedder_specific_test = Embedder(model_name='paraphrase-MiniLM-L3-v2')
        #     if embedder_specific_test.model:
        #         specific_embedding = embedder_specific_test.embed("Test with specific model.")
        #         if specific_embedding is not None:
        #             print(f"Specific model embedding (first 5 dims): {specific_embedding[:5]}")
        #             print(f"Specific model dimension: {embedder_specific_test.get_dimension()}")
        # except RuntimeError as e:
        #     print(f"Could not test specific model: {e}")


    except RuntimeError as e:
        print(f"Error initializing embedder for testing: {e}")
    except ImportError:
        print("Please install sentence-transformers: uv pip install sentence-transformers transformers torch")
